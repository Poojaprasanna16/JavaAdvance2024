//Program on Binary Tree to print the elements left and right


SOURCE CODDE\
import java.util.*;
import java.util.Queue;
class Node
{
 int data;
 Node left,right;

 Node(int x)
 {
   data=x;
   left=null;
   right=null;
 }
 
 void insert(Node root,int x)
 {
   Queue<Node> que=new LinkedList<>();
   que.add(root);
   while(!que.isEmpty())
   {
     Node temp=que.poll();
     if(temp.left==null)
     {
        temp.left=new Node(x);
        break;
     }  
     else
          que.add(temp.left);
    if(temp.right==null)
    {
      temp.right=new Node(x);
      break;
    }
    else
         que.add(temp.right);
    }
  }

  void printTree(Node root)
  {
    if(root!=null)
    {
      printTree(root.left);
      System.out.print(root.data +" ");
      printTree(root.right);
     }
   }
  
   public int count(Node root)
   {   
     int c=0;
     if(root!=null)
     {
        c=1+count(root.left)+count(root.right);
     }
     else
      {
          return 0;
          
     }
	return c;
   }
  } 

class Binary_Tree{
  public static void main(String args[])
  {
      int x;
      Scanner s=new Scanner(System.in);
      System.out.println("Enter root node:");
      x=s.nextInt();
      Node root=new Node(x);
     while(true)
     {
        System.out.println();
        System.out.println("1.Insert\n 2.Print\n 3.Count nodes\n 4.Exit");
        System.out.println("Enter your choice:");
        int ch=s.nextInt();
        if(ch==1)
        {
          System.out.println("Enter element");
          x=s.nextInt();
          root.insert(root,x);
        }
        else if(ch==2)
           root.printTree(root);
        else if(ch==3)
         {
              int c;
              c=root.count(root);
               System.out.println("Total Nodes in tree:" +c);
          }
         else if(ch==4)
              break;
        else
            System.out.println("Invalid choice");
     }
  }
}
